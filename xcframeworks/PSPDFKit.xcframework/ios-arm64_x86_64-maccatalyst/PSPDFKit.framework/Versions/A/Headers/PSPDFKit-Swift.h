#if 1// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef PSPDFKIT_SWIFT_H
#define PSPDFKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#import <PSPDFKit/PSPDFKit.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PSPDFKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@class NSUndoManager;
@class NSString;
@protocol PSPDFUndoRecorder;
@protocol PSPDFDetachedUndoRecorder;
@protocol PSPDFPendingUndoRecorder;

/// A type that keeps track of undoable commands and works together with the
/// system undo manager to provide the undo/redo functionality for documents.
/// You can use the undo controller to record new commands, and you can use the
/// underlying undo manager to actually perform undo/redo.
/// <h1>Recording Commands</h1>
/// The undo/redo stacks contain commands that consist of one or more actions.
/// You can add new commands to the undo stack by asking the undo controller for
/// a recorder and using it to record multiple actions.
/// \code
/// undoController.recordCommand(named: "Replace Annotation") { recorder in
///     recorder.record(removing: [squareAnnotation]) {
///         document.remove(annotations: [squareAnnotation])
///     }
///     recorder.record(adding: [circleAnnotation]) {
///         document.add(annotations: [circleAnnotation])
///     }
/// }
///
/// \endcodeIf you want to record a new command that consists only of one type of action,
/// you can use the convenience functions instead.
/// \code
/// undoController.recordCommand(named: "Change Font Size", changing: [freeTextAnnotation]) {
///     freeTextAnnotation.fontSize = 32
///     freeTextAnnotation.sizeToFit()
/// }
///
/// \endcodeIf you want to record actions that happen asynchronously over time, you can
/// ask the undo controller for a detached recorder instead and commit it at the
/// end.
/// \code
/// let recorder = undoController.beginRecordingCommand(named: "Rotate Annotation", changing: [stampAnnotation])
/// // Allow the user to rotate the stamp annotation.
/// recorder.commit()
///
/// \endcodeUndone commands automatically end up on the redo stack. You can’t add new
/// commands to the redo stack yourself.
/// <h1>Performing Undo and Redo</h1>
/// The undo controller integrates with the system undo manager to provide the
/// best and most natural undo/redo experience. Use it to check if undo/redo
/// is possible and to perform it.
/// \code
/// if undoController.undoManager.canUndo {
///     undoController.undoManager.undo()
/// }
///
/// \endcode<h1>Observing Stacks</h1>
/// You can observe the undo manager’s notifications if you need to respond to
/// changes in the undo/redo stack. See the documentation of <code>UndoManager</code> for
/// the complete list of observable notifications.
/// PSPDF_EXPORT(PSPDFUndoController)
SWIFT_PROTOCOL_NAMED("UndoController")
@protocol PSPDFUndoController
/// The underlying undo manager that can be exposed in a responder chain to
/// enable undo/redo functionality.
/// You can use this undo manager to register your own custom actions but be
/// aware that your actions might be removed and the state of this undo
/// manager reset if an error occurs.
@property (nonatomic, readonly, strong) NSUndoManager * _Nonnull undoManager;
/// Record an undoable command with the given localized name and actions
/// recorded in the scope of the given closure.
/// An undoable command is added to the undo stack right after execution of
/// the given closure, provided that at least one action was recorded.
/// note:
/// Recording a new undoable command will invalidate the stack
/// of redoable commands.
/// \param name Localized name of the command that will be used in UI. To
/// display “Undo Change Font Size”, set this to “Change Font Size”.
/// If <code>nil</code> or empty, a simple “Undo” title will be used instead.
///
/// \param scope Closure in which undoable actions are recorded. The
/// passed-in <code>recorder</code> can be used to record actions.
///
- (void)recordCommandNamed:(NSString * _Nullable)name inScope:(SWIFT_NOESCAPE void (^ _Nonnull)(id <PSPDFUndoRecorder> _Nonnull))scope;
/// Record an undoable command with the given localized name, recording
/// actions of changing multiple properties of the given annotations by
/// observing changes made to them in the scope of the given closure.
/// note:
/// Recording a new undoable command will invalidate the stack
/// of redoable commands.
/// precondition:
/// Each of the given annotations must already be referenced
/// in a PDF document, otherwise they will be ignored.
/// \param name Localized name of the command that will be used in UI. To
/// display “Undo Change Thickness”, set this to “Change Thickness”.
/// If <code>nil</code> or empty, a simple “Undo” title will be used instead.
///
/// \param annotations Annotations expected to change.
///
/// \param scope Closure in which annotations are changed.
///
- (void)recordCommandNamed:(NSString * _Nullable)name changingAnnotations:(NSArray<PSPDFAnnotation *> * _Nonnull)annotations inScope:(SWIFT_NOESCAPE void (^ _Nonnull)(void))scope;
/// Record an undoable command with the given localized name, recording
/// actions of adding the given annotations to a document.
/// note:
/// Recording a new undoable command will invalidate the stack
/// of redoable commands.
/// \param name Localized name of the command that will be used in UI. To
/// display “Undo Add Square”, set this to “Add Square”. If <code>nil</code> or
/// empty, a simple “Undo” title will be used instead.
///
/// \param annotations Annotations expected to be added.
///
/// \param scope Closure in which annotations are added to a document.
///
- (void)recordCommandNamed:(NSString * _Nullable)name addingAnnotations:(NSArray<PSPDFAnnotation *> * _Nonnull)annotations inScope:(SWIFT_NOESCAPE void (^ _Nonnull)(void))scope;
/// Record an undoable command with the given localized name, recording
/// actions of removing the given annotations from a document.
/// note:
/// Recording a new undoable command will invalidate the stack
/// of redoable commands.
/// \param name Localized name of the command that will be used in UI. To
/// display “Undo Remove Note”, set this to “Remove Note”. If <code>nil</code> or
/// empty, a simple “Undo” title will be used instead.
///
/// \param annotations Annotations expected to be removed.
///
/// \param scope Closure in which annotations are removed from a document.
///
- (void)recordCommandNamed:(NSString * _Nullable)name removingAnnotations:(NSArray<PSPDFAnnotation *> * _Nonnull)annotations inScope:(SWIFT_NOESCAPE void (^ _Nonnull)(void))scope;
/// Begin recording an undoable command with the given localized name and
/// actions recorded during the lifetime of the returned recorder.
/// An undoable command is added to the undo stack right after committing
/// the returned recorder, provided that at least one action was recorded.
/// note:
/// Recording a new undoable command will invalidate the stack
/// of redoable commands.
/// \param name Localized name of the command that will be used in UI. To
/// display “Undo Move Annotation”, set this to “Move Annotation”. If
/// <code>nil</code> or empty, a simple “Undo” title will be used instead.
///
///
/// returns:
/// Object that can be used to record actions. This object is not
/// owned by the callee and must be retained by the caller.
- (id <PSPDFDetachedUndoRecorder> _Nonnull)beginRecordingCommandNamed:(NSString * _Nullable)name SWIFT_WARN_UNUSED_RESULT;
/// Begin recording an undoable command with the given localized name,
/// recording actions of changing multiple properties of the given
/// annotations by observing changes made to them during the lifetime of the
/// returned recorder.
/// note:
/// Recording a new undoable command will invalidate the stack
/// of redoable commands.
/// note:
/// The returned recorder retains strong references to the given
/// annotations until it’s committed.
/// precondition:
/// Each of the given annotations must already be referenced
/// in a PDF document, otherwise they will be ignored.
/// \param name Localized name of the command that will be used in UI. To
/// display “Undo Resize Annotation”, set this to “Resize Annotation”.
/// If <code>nil</code> or empty, simple “Undo” title will be used instead.
///
/// \param annotations Annotations expected to change.
///
///
/// returns:
/// Object that records changes to the given annotations upon
/// committing. This object is not owned by the callee and must be
/// retained by the caller.
- (id <PSPDFPendingUndoRecorder> _Nonnull)beginRecordingCommandNamed:(NSString * _Nullable)name changingAnnotations:(NSArray<PSPDFAnnotation *> * _Nonnull)annotations SWIFT_WARN_UNUSED_RESULT;
@end




/// A type of recorder that has begun recording actions and is waiting to be
/// manually committed.
/// PSPDF_EXPORT(PSPDFPendingUndoRecorder)
SWIFT_PROTOCOL_NAMED("PendingUndoRecorder")
@protocol PSPDFPendingUndoRecorder
/// Commit all recorded actions so far to the parent undo recorder or undo
/// controller.
/// precondition:
/// Committing an already committed recorder is not allowed
/// and will result in an assertion failure.
- (void)commit;
@end



/// A type yielded by an undo controller that allows recording multiple undoable
/// actions grouped as one undoable command.
/// PSPDF_EXPORT(PSPDFUndoRecorder)
SWIFT_PROTOCOL_NAMED("UndoRecorder")
@protocol PSPDFUndoRecorder
/// Record actions of changing multiple properties of the given annotations
/// by observing changes made to them in the scope of the given closure.
/// \code
/// recorder.record(changing: [freeTextAnnotation]) {
///     freeTextAnnotation.fontSize = 32
///     freeTextAnnotation.sizeToFit()
/// }
///
/// \endcodeThe above code will record two actions for <code>freeTextAnnotation</code>: one for
/// <code>fontAttributes</code>, which changes as a result of setting <code>fontSize</code>, and
/// one for <code>boundingBox</code>, which changes as result of calling <code>sizeToFit()</code>.
/// precondition:
/// Recording new actions in an already committed recorder
/// is not allowed and will result in an assertion failure.
/// precondition:
/// Each of the given annotations must already be referenced
/// in a PDF document, otherwise they will be ignored.
/// \param annotations Annotations expected to change.
///
/// \param scope Closure in which annotations are changed.
///
- (void)recordChangingAnnotations:(NSArray<PSPDFAnnotation *> * _Nonnull)annotations inScope:(SWIFT_NOESCAPE void (^ _Nonnull)(void))scope;
/// Record actions of adding the given annotations to a document.
/// \code
/// recorder.record(adding: [lineAnnotation, circleAnnotation]) {
///     document.add(annotations: [lineAnnotation, circleAnnotation])
/// }
///
/// \endcodeThe above code will record two actions: one for adding <code>lineAnnotation</code>
/// and one for adding <code>circleAnnotation</code>.
/// precondition:
/// Recording new actions in an already committed recorder
/// is not allowed and will result in an assertion failure.
/// \param annotations Annotations expected to be added.
///
/// \param scope Closure in which annotations are added to a document.
///
- (void)recordAddingAnnotations:(NSArray<PSPDFAnnotation *> * _Nonnull)annotations inScope:(SWIFT_NOESCAPE void (^ _Nonnull)(void))scope;
/// Record actions of removing the given annotations from a document.
/// \code
/// recorder.record(removing: [noteAnnotation, inkAnnotation]) {
///     document.remove(annotations: [noteAnnotation, inkAnnotation])
/// }
///
/// \endcodeThe above code will record two actions: one for removing <code>noteAnnotation</code>
/// and one for removing <code>inkAnnotation</code>.
/// precondition:
/// Recording new actions in an already committed recorder
/// is not allowed and will result in an assertion failure.
/// \param annotations Annotations expected to be removed.
///
/// \param scope Closure in which annotations are removed from a document.
///
- (void)recordRemovingAnnotations:(NSArray<PSPDFAnnotation *> * _Nonnull)annotations inScope:(SWIFT_NOESCAPE void (^ _Nonnull)(void))scope;
@end



/// A type of recorder that can be taken out of the scope managed by an undo
/// controller to record undoable actions over time until manually committed.
/// PSPDF_EXPORT(PSPDFDetachedUndoRecorder)
SWIFT_PROTOCOL_NAMED("DetachedUndoRecorder")
@protocol PSPDFDetachedUndoRecorder <PSPDFPendingUndoRecorder, PSPDFUndoRecorder>
/// Begin recording actions of changing multiple properties of the given
/// annotations by observing changes made to them during the lifetime of the
/// returned recorder.
/// note:
/// The returned recorder retains strong references to the given
/// annotations until it’s committed.
/// precondition:
/// Recording new actions in an already committed recorder
/// is not allowed and will result in an assertion failure.
/// precondition:
/// Each of the given annotations must already be referenced
/// in a PDF document, otherwise they will be ignored.
/// \param annotations Annotations expected to change.
///
///
/// returns:
/// Object that records changes to the given annotations upon
/// committing. This object is not owned by the callee and must be retained
/// by the caller.
- (id <PSPDFPendingUndoRecorder> _Nonnull)beginRecordingChangingAnnotations:(NSArray<PSPDFAnnotation *> * _Nonnull)annotations SWIFT_WARN_UNUSED_RESULT;
@end




@class NSURLSessionConfiguration;
@class NSCoder;
@class NSProgress;

/// The <code>URLDataProvider</code> manages automatic downloading of a file.
/// By default, downloads will use <code>URLCache</code> to cache downloads.
/// The downloaded file is stored in a tmp directory (purged automatically by the system)
/// while the cache is stored in the Caches directory (preserved except on low disk events)
/// If a custom <code>targetURL</code> is set and a file exists at this location, no download will be attempted.
/// To ensure that the file is always up-to-date, delete the file at <code>targetURL</code> before allocating this class.
/// This class starts downloading the file as soon as it is initialized.
/// PSPDF_EXPORT(PSPDFURLDataProvider)
SWIFT_CLASS_NAMED("URLDataProvider")
@interface PSPDFURLDataProvider : NSObject <PSPDFDataProviding>
/// URL is fixed at init time.
@property (nonatomic, readonly, copy) NSURL * _Nonnull URL;
/// Location of the file on-disk, once download is complete.
/// If <code>targetURL</code> is not set in the initializer, an automatic URL is generated.
/// If a file exists there, downloading is skipped.
@property (nonatomic, readonly, copy) NSURL * _Nonnull targetURL;
/// The session configuration that is used to initiate the download.
@property (nonatomic, readonly, strong) NSURLSessionConfiguration * _Nullable sessionConfiguration;
/// Initialize class with an URL and an optional session configuration.
/// note:
/// <code>URLSessionConfiguration</code> cannot be serialized via NSCoder and is ignored.
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)url sessionConfiguration:(NSURLSessionConfiguration * _Nullable)sessionConfiguration targetURL:(NSURL * _Nullable)targetURL OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer to improve Objective-C API.
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)url;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (NSData * _Nullable)data:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) uint64_t size;
@property (nonatomic, copy) NSString * _Nonnull UID;
@property (nonatomic) NSError * _Nullable error;
/// Writing is not supported
@property (nonatomic) PSPDFDataProvidingAdditionalOperations additionalOperationsSupported;
/// Returns progress of the download task
@property (nonatomic, strong) NSProgress * _Nullable progress;
@property (nonatomic, copy) NSData * _Nullable signature;
- (NSData * _Nullable)readDataWithSize:(uint64_t)size atOffset:(uint64_t)offset error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Converts a URL into a file name that can be safely stored on disk.
/// While the path should be unique, conflicts might happen if the URL is too long and too similar.
+ (NSURL * _Nullable)defaultTargetURLForRemoteURL:(NSURL * _Nonnull)remoteURL SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSURLCache;

@interface PSPDFURLDataProvider (SWIFT_EXTENSION(PSPDFKit))
/// Downloads by default use this custom, large cache to ensure files are being updated correctly.
/// https://pspdfkit.com/blog/2020/downloading-large-files-with-urlsession/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSURLCache * _Nullable cache;)
+ (NSURLCache * _Nullable)cache SWIFT_WARN_UNUSED_RESULT;
+ (void)setCache:(NSURLCache * _Nullable)value;
@end

#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
