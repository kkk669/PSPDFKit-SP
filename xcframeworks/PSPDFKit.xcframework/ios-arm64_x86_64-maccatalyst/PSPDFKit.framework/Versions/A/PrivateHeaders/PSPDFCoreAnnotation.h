//
//  Copyright © 2016-2023 PSPDFKit GmbH. All rights reserved.
//
//  THIS SOURCE CODE AND ANY ACCOMPANYING DOCUMENTATION ARE PROTECTED BY INTERNATIONAL COPYRIGHT LAW
//  AND MAY NOT BE RESOLD OR REDISTRIBUTED. USAGE IS BOUND TO THE PSPDFKIT LICENSE AGREEMENT.
//  UNAUTHORIZED REPRODUCTION OR DISTRIBUTION IS SUBJECT TO CIVIL AND CRIMINAL PENALTIES.
//  This notice may not be removed from this file.
//

#import <PSPDFKit/PSPDFEnvironment.h>

#import <PSPDFKit/PSPDFCoreAnnotationSyncOption.h>
#import <PSPDFKit/PSPDFDataSink.h>
#import <PSPDFKit/PSPDFDataProviding.h>

NS_ASSUME_NONNULL_BEGIN

@class PDFCAnnotation, PSPDFDocumentProvider;
@protocol PSPDFPropertyMapAccessor, PSPDFPropertyMapReader; // Cannot import because we’re in a framework header

@interface PSPDFCoreAnnotation : NSObject

// See PSPDFCoreAnnotation+Private.hpp for more initializers. We don't want to include it here to not C++ everything.
PSPDF_EMPTY_INIT_UNAVAILABLE

/// The type string.
@property (nonatomic, readonly, nullable) NSString *annotationTypeString;

/// Checks if the annotation has an appearance stream. This is NOT a property as it is only runtime information.
@property (nonatomic, readonly) BOOL hasAppearanceStream;

/// Tries to find any attached resource to the annotation. This is annotation specific, e.g. stamp annotations will return a image,
/// rich media annotations a video, ...
@property (nonatomic, readonly, nullable) NSString *assetResource;

/// Tries to fetch a resource identifier for a image in the annotations AP stream.
@property (nonatomic, readonly, nullable) NSString *apStreamImageResource;

/// Tries to fetch a resource identifier for the widget's MK.I AP stream.
@property (nonatomic, readonly, nullable) NSString *widgetMKIResource;

/// Returns the annotationID for the annotation. For PDF annotations, this is always the objnum.
@property (nonatomic, readonly) NSInteger annotationID;

/// Returns a djinni compatible annotation object.
@property (nonatomic, readonly) PDFCAnnotation *djinniAnnotation;

/// Attaches the core annotation to the document.
- (BOOL)attachToDocumentProvider:(PSPDFDocumentProvider *)documentProvider onPage:(PSPDFPageIndex)pageIndex error:(NSError **)error;

// MARK: Accessing Core Properties

/// Synchronously executes the given block, providing locked read-only access to the properties.
///
/// This method allows grouping reads in a single block for atomicity and better performance.
///
/// @note The parameter passed into the block will be different from the receiver!
- (void)performRead:(void (^)(id<PSPDFPropertyMapReader> reader))block;

/// Exclusively executes the given block, providing locked read-write access to the properties.
///
/// This method allows grouping edits in a single block for atomicity and better performance. This
/// method will execute the given block synchronously, e.g. in a re-entrant fashion or when called
/// inside a `performSync:` block.
///
/// @note The parameter passed into the block will be different from the receiver!
- (void)performAsyncWrite:(void (^)(id<PSPDFPropertyMapAccessor> lockedAccessor))block;

/// Synchronously, and exclusively execute the given block, providing locked read-write access to the
/// properties.
///
/// This method allows grouping edits in a single block for atomicity and better performance.
///
/// @note The parameter passed into the block will be different from the receiver!
- (void)performSync:(void (^)(id<PSPDFPropertyMapAccessor> lockedAccessor))block;

/// @note When in doubt, use `performSync:` instead. Only use this method when you need to control AP
/// stream generation.
- (void)performSyncWithOption:(PSPDFCoreAnnotationSyncOption)option exclusiveAccessor:(void (^)(id<PSPDFPropertyMapAccessor> lockedAccessor))block;

// MARK: Generating Instant JSON:

/// Generates InstantJSON from the receiver.
///
/// @param documentProvider The document provider that contains the receiver.
/// @param outError Pointer to an `NSError` object that will be set in case JSON generation fails.
/// @return `Data` containing the generated JSON or `nil` if an error occurred.
- (nullable NSData *)generateInstantJSONWithDocumentProvider:(PSPDFDocumentProvider *)documentProvider error:(NSError **)outError;

// MARK: Accessing Associated Values:

/// Clears the value stored under `key` on the receiver’s associated `baseAnnotation`.
///
/// This is the inverse operation to `set<Type>:forKey:includeInInstantJSON:`.
- (void)clearValueForKey:(NSString *)key;

/// Stores a BOOL that can be accessed using `key` on the `baseAnnotation` associated with the receiver.
///
/// If `includeInInstantJSON` is `true`, the key will be included in the JSON generated by
/// `-generateInstantJSONWithDocumentProvider:error:`.
- (void)setBool:(BOOL)boolValue forKey:(NSString *)key includeInInstantJSON:(BOOL)includeInInstantJSON;

/// Returns the BOOL that has previously been stored for `key`, returns the specified fallback when no
/// such value exists.
- (BOOL)boolForKey:(NSString *)key fallbackValue:(BOOL)fallback;

/// Stores a string that can be accessed using `key` on the `baseAnnotation` associated with the
/// receiver.
///
/// If `includeInInstantJSON` is YES, the key will be included in the JSON generated by
/// `-generateInstantJSONWithDocumentProvider:error:`.
- (void)setString:(NSString *)string forKey:(NSString *)key includeInInstantJSON:(BOOL)includeInInstantJSON;

/// Returns the string that has previously been stored for `key`, or nil when no such value exists.
- (nullable NSString *)stringForKey:(NSString *)key;

/// Stores an int that can be accessed using `key` on the `baseAnnotation` associated with the
/// receiver.
///
/// If `includeInInstantJSON` is YES, the key will be included in the JSON generated by
/// `-generateInstantJSONWithDocumentProvider:error:`.
- (void)setInt:(int)integer forKey:(NSString *)key includeInInstantJSON:(BOOL)includeInInstantJSON;

/// Returns the int that has previously been stored for `key`, returns the specified fallback when no
/// such value exists.
- (int)intForKey:(NSString *)key fallbackValue:(int)fallbackValue;

// MARK: Managing Instant JSON Attachments:

/// Checks if this annotation has a binary Instant JSON attachment. For example, a stamp annotation with an image has one.
///
/// You can use `writeBinaryInstantJSONAttachmentToDataSink:error:` to fetch the attachment.
@property (nonatomic, readonly) BOOL hasBinaryInstantJSONAttachment;

/// If this annotation has a binary Instant JSON attachment, writes it into the `dataSink`.
///
/// @param dataSink The data sink the binary attachment will be written to. See `PSPDFFileDataSink` or `PSPDFDataContainerSink`.
/// @return The mime type if successful, nil otherwise.
- (nullable NSString *)writeBinaryInstantJSONAttachmentToDataSink:(id<PSPDFDataSink>)dataSink error:(NSError **)error;

/// Attaches a binary Instant JSON attachment to the annotation. Can be generated using `writeBinaryInstantJSONAttachmentToDataSink:error:`.
///
/// @param dataProvider The data provider with the binary Instant JSON data.
/// @return YES if successful, otherwise NO.
- (BOOL)attachBinaryInstantJSONAttachmentFromDataProvider:(id<PSPDFDataProviding>)dataProvider error:(NSError **)error;

// MARK: Exposed for Tests

/**
 Creates a core annotation from the given InstantJSON. Together with `-[PSPDFAnnotation initWithCoreAnnotation:]` this can be
 used to deserialize a `InstantJSON` annotation to a `PSPDFAnnotation`.
 */
+ (nullable instancetype)createCoreAnnotationWithInstantJSON:(NSData *)instantJSON documentProvider:(PSPDFDocumentProvider *)documentProvider error:(NSError **)error;

/// Checks if the annotation is attached to a document.
@property (nonatomic, readonly) BOOL isAttachedToDocument;

/// Checks if the annotation should be saved to a document.
@property (nonatomic, readonly, getter=shouldSave) BOOL shouldSave;

@end

NS_ASSUME_NONNULL_END
